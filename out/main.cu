int main(int argc, char ** argv) {
     
    float elapsed_time;
    // set up device
    int dev = 0;
    cudaDeviceProp deviceProp;
    CHECK(cudaGetDeviceProperties(&deviceProp, dev));
    printf("Using Device %d: %s\n", dev, deviceProp.name);
    CHECK(cudaSetDevice(dev));

    // set up data size of vectors
    int nElem = 1 << 25;
    printf("Vector Size %d\n", nElem);

    // malloc host memory
    size_t nBytes = nElem * sizeof(float);

    float  * h_0,  * h_1,  * h_2,  * h_3,  * h_4,  * h_5,  * h_6,  * h_7,  * h_8,  * h_9,  * h_10,  * h_11,  * h_12,  * h_13,  * h_14,  * h_15,  * h_16,  * h_17,  * h_18,  * h_19,  * h_20,  * h_21,  * h_22,  * h_23,  * h_24,  * h_25,  * h_26,  * h_27,  * h_28,  * h_29,  * h_30,  * h_31,  * h_32,  * h_33,  * h_34,  * h_35,  * h_36,  * h_37,  * h_38,  * h_39,  * h_40,  * h_41,  * h_42,  * h_43,  * h_44,  * h_45;
    int * h_P, * hostRef;
    	h_0 = (float * ) malloc(nBytes);
	h_1 = (float * ) malloc(nBytes);
	h_2 = (float * ) malloc(nBytes);
	h_3 = (float * ) malloc(nBytes);
	h_4 = (float * ) malloc(nBytes);
	h_5 = (float * ) malloc(nBytes);
	h_6 = (float * ) malloc(nBytes);
	h_7 = (float * ) malloc(nBytes);
	h_8 = (float * ) malloc(nBytes);
	h_9 = (float * ) malloc(nBytes);
	h_10 = (float * ) malloc(nBytes);
	h_11 = (float * ) malloc(nBytes);
	h_12 = (float * ) malloc(nBytes);
	h_13 = (float * ) malloc(nBytes);
	h_14 = (float * ) malloc(nBytes);
	h_15 = (float * ) malloc(nBytes);
	h_16 = (float * ) malloc(nBytes);
	h_17 = (float * ) malloc(nBytes);
	h_18 = (float * ) malloc(nBytes);
	h_19 = (float * ) malloc(nBytes);
	h_20 = (float * ) malloc(nBytes);
	h_21 = (float * ) malloc(nBytes);
	h_22 = (float * ) malloc(nBytes);
	h_23 = (float * ) malloc(nBytes);
	h_24 = (float * ) malloc(nBytes);
	h_25 = (float * ) malloc(nBytes);
	h_26 = (float * ) malloc(nBytes);
	h_27 = (float * ) malloc(nBytes);
	h_28 = (float * ) malloc(nBytes);
	h_29 = (float * ) malloc(nBytes);
	h_30 = (float * ) malloc(nBytes);
	h_31 = (float * ) malloc(nBytes);
	h_32 = (float * ) malloc(nBytes);
	h_33 = (float * ) malloc(nBytes);
	h_34 = (float * ) malloc(nBytes);
	h_35 = (float * ) malloc(nBytes);
	h_36 = (float * ) malloc(nBytes);
	h_37 = (float * ) malloc(nBytes);
	h_38 = (float * ) malloc(nBytes);
	h_39 = (float * ) malloc(nBytes);
	h_40 = (float * ) malloc(nBytes);
	h_41 = (float * ) malloc(nBytes);
	h_42 = (float * ) malloc(nBytes);
	h_43 = (float * ) malloc(nBytes);
	h_44 = (float * ) malloc(nBytes);
	h_45 = (float * ) malloc(nBytes);
    hostRef = (int * ) malloc(nBytes);
    h_P = (int * ) malloc(nBytes);

    	initialData(h_0, nElem);
	initialData(h_1, nElem);
	initialData(h_2, nElem);
	initialData(h_3, nElem);
	initialData(h_4, nElem);
	initialData(h_5, nElem);
	initialData(h_6, nElem);
	initialData(h_7, nElem);
	initialData(h_8, nElem);
	initialData(h_9, nElem);
	initialData(h_10, nElem);
	initialData(h_11, nElem);
	initialData(h_12, nElem);
	initialData(h_13, nElem);
	initialData(h_14, nElem);
	initialData(h_15, nElem);
	initialData(h_16, nElem);
	initialData(h_17, nElem);
	initialData(h_18, nElem);
	initialData(h_19, nElem);
	initialData(h_20, nElem);
	initialData(h_21, nElem);
	initialData(h_22, nElem);
	initialData(h_23, nElem);
	initialData(h_24, nElem);
	initialData(h_25, nElem);
	initialData(h_26, nElem);
	initialData(h_27, nElem);
	initialData(h_28, nElem);
	initialData(h_29, nElem);
	initialData(h_30, nElem);
	initialData(h_31, nElem);
	initialData(h_32, nElem);
	initialData(h_33, nElem);
	initialData(h_34, nElem);
	initialData(h_35, nElem);
	initialData(h_36, nElem);
	initialData(h_37, nElem);
	initialData(h_38, nElem);
	initialData(h_39, nElem);
	initialData(h_40, nElem);
	initialData(h_41, nElem);
	initialData(h_42, nElem);
	initialData(h_43, nElem);
	initialData(h_44, nElem);
	initialData(h_45, nElem);

    memset(hostRef, 0, nBytes);
    memset(h_P, 0, nBytes);

    // malloc device global memory
    float * d_0, * d_1, * d_2, * d_3, * d_4, * d_5, * d_6, * d_7, * d_8, * d_9, * d_10, * d_11, * d_12, * d_13, * d_14, * d_15, * d_16, * d_17, * d_18, * d_19, * d_20, * d_21, * d_22, * d_23, * d_24, * d_25, * d_26, * d_27, * d_28, * d_29, * d_30, * d_31, * d_32, * d_33, * d_34, * d_35, * d_36, * d_37, * d_38, * d_39, * d_40, * d_41, * d_42, * d_43, * d_44, * d_45;
    int * d_P;
        CHECK(cudaMalloc((float ** ) & d_0, nBytes));
    CHECK(cudaMalloc((float ** ) & d_1, nBytes));
    CHECK(cudaMalloc((float ** ) & d_2, nBytes));
    CHECK(cudaMalloc((float ** ) & d_3, nBytes));
    CHECK(cudaMalloc((float ** ) & d_4, nBytes));
    CHECK(cudaMalloc((float ** ) & d_5, nBytes));
    CHECK(cudaMalloc((float ** ) & d_6, nBytes));
    CHECK(cudaMalloc((float ** ) & d_7, nBytes));
    CHECK(cudaMalloc((float ** ) & d_8, nBytes));
    CHECK(cudaMalloc((float ** ) & d_9, nBytes));
    CHECK(cudaMalloc((float ** ) & d_10, nBytes));
    CHECK(cudaMalloc((float ** ) & d_11, nBytes));
    CHECK(cudaMalloc((float ** ) & d_12, nBytes));
    CHECK(cudaMalloc((float ** ) & d_13, nBytes));
    CHECK(cudaMalloc((float ** ) & d_14, nBytes));
    CHECK(cudaMalloc((float ** ) & d_15, nBytes));
    CHECK(cudaMalloc((float ** ) & d_16, nBytes));
    CHECK(cudaMalloc((float ** ) & d_17, nBytes));
    CHECK(cudaMalloc((float ** ) & d_18, nBytes));
    CHECK(cudaMalloc((float ** ) & d_19, nBytes));
    CHECK(cudaMalloc((float ** ) & d_20, nBytes));
    CHECK(cudaMalloc((float ** ) & d_21, nBytes));
    CHECK(cudaMalloc((float ** ) & d_22, nBytes));
    CHECK(cudaMalloc((float ** ) & d_23, nBytes));
    CHECK(cudaMalloc((float ** ) & d_24, nBytes));
    CHECK(cudaMalloc((float ** ) & d_25, nBytes));
    CHECK(cudaMalloc((float ** ) & d_26, nBytes));
    CHECK(cudaMalloc((float ** ) & d_27, nBytes));
    CHECK(cudaMalloc((float ** ) & d_28, nBytes));
    CHECK(cudaMalloc((float ** ) & d_29, nBytes));
    CHECK(cudaMalloc((float ** ) & d_30, nBytes));
    CHECK(cudaMalloc((float ** ) & d_31, nBytes));
    CHECK(cudaMalloc((float ** ) & d_32, nBytes));
    CHECK(cudaMalloc((float ** ) & d_33, nBytes));
    CHECK(cudaMalloc((float ** ) & d_34, nBytes));
    CHECK(cudaMalloc((float ** ) & d_35, nBytes));
    CHECK(cudaMalloc((float ** ) & d_36, nBytes));
    CHECK(cudaMalloc((float ** ) & d_37, nBytes));
    CHECK(cudaMalloc((float ** ) & d_38, nBytes));
    CHECK(cudaMalloc((float ** ) & d_39, nBytes));
    CHECK(cudaMalloc((float ** ) & d_40, nBytes));
    CHECK(cudaMalloc((float ** ) & d_41, nBytes));
    CHECK(cudaMalloc((float ** ) & d_42, nBytes));
    CHECK(cudaMalloc((float ** ) & d_43, nBytes));
    CHECK(cudaMalloc((float ** ) & d_44, nBytes));
    CHECK(cudaMalloc((float ** ) & d_45, nBytes));
    CHECK(cudaMalloc((int ** ) & d_P, nBytes));

    // transfer data from host to device
        CHECK(cudaMemcpy(d_0, h_0, nBytes, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_1, h_1, nBytes, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_2, h_2, nBytes, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_3, h_3, nBytes, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_4, h_4, nBytes, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_5, h_5, nBytes, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_6, h_6, nBytes, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_7, h_7, nBytes, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_8, h_8, nBytes, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_9, h_9, nBytes, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_10, h_10, nBytes, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_11, h_11, nBytes, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_12, h_12, nBytes, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_13, h_13, nBytes, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_14, h_14, nBytes, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_15, h_15, nBytes, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_16, h_16, nBytes, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_17, h_17, nBytes, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_18, h_18, nBytes, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_19, h_19, nBytes, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_20, h_20, nBytes, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_21, h_21, nBytes, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_22, h_22, nBytes, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_23, h_23, nBytes, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_24, h_24, nBytes, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_25, h_25, nBytes, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_26, h_26, nBytes, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_27, h_27, nBytes, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_28, h_28, nBytes, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_29, h_29, nBytes, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_30, h_30, nBytes, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_31, h_31, nBytes, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_32, h_32, nBytes, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_33, h_33, nBytes, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_34, h_34, nBytes, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_35, h_35, nBytes, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_36, h_36, nBytes, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_37, h_37, nBytes, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_38, h_38, nBytes, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_39, h_39, nBytes, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_40, h_40, nBytes, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_41, h_41, nBytes, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_42, h_42, nBytes, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_43, h_43, nBytes, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_44, h_44, nBytes, cudaMemcpyHostToDevice));
    CHECK(cudaMemcpy(d_45, h_45, nBytes, cudaMemcpyHostToDevice));
    // invoke kernel at host side
    int iLen = 512;
    dim3 block(iLen);
    dim3 grid((nElem + block.x - 1) / block.x);

    cudaEvent_t start, stop;
    CHECK(cudaEventCreate( & start));
    CHECK(cudaEventCreate( & stop));
    // record start event
    CHECK(cudaEventRecord(start, 0));
    RF_with_IF << < grid, block >>> (d_0, d_1, d_2, d_3, d_4, d_5, d_6, d_7, d_8, d_9, d_10, d_11, d_12, d_13, d_14, d_15, d_16, d_17, d_18, d_19, d_20, d_21, d_22, d_23, d_24, d_25, d_26, d_27, d_28, d_29, d_30, d_31, d_32, d_33, d_34, d_35, d_36, d_37, d_38, d_39, d_40, d_41, d_42, d_43, d_44, d_45, d_P, nElem);
    CHECK(cudaEventRecord(stop, 0));
    CHECK(cudaEventSynchronize(stop));
    // calculate elapsed time
    CHECK(cudaEventElapsedTime( & elapsed_time, start, stop));
    printf("RF with IF - execution time = %.6fms\n", elapsed_time);

    CHECK(cudaMemcpy(h_P, d_P, nBytes, cudaMemcpyDeviceToHost));
    CHECK(cudaEventCreate( & start));
    CHECK(cudaEventCreate( & stop));
    // record start event
    CHECK(cudaEventRecord(start, 0));
    RF_with_EQ << < grid, block >>> (d_0, d_1, d_2, d_3, d_4, d_5, d_6, d_7, d_8, d_9, d_10, d_11, d_12, d_13, d_14, d_15, d_16, d_17, d_18, d_19, d_20, d_21, d_22, d_23, d_24, d_25, d_26, d_27, d_28, d_29, d_30, d_31, d_32, d_33, d_34, d_35, d_36, d_37, d_38, d_39, d_40, d_41, d_42, d_43, d_44, d_45, d_P, nElem);
    CHECK(cudaEventRecord(stop, 0));
    CHECK(cudaEventSynchronize(stop));
    // calculate elapsed time
    CHECK(cudaEventElapsedTime( & elapsed_time, start, stop));
    printf("RF with EQ - execution time = %.6fms\n", elapsed_time);

    CHECK(cudaGetLastError());

    // copy kernel result back to host side
    CHECK(cudaMemcpy(h_P, d_P, nBytes, cudaMemcpyDeviceToHost));
    printf("\n ");

    // free host memory
        free(h_0);
    free(h_1);
    free(h_2);
    free(h_3);
    free(h_4);
    free(h_5);
    free(h_6);
    free(h_7);
    free(h_8);
    free(h_9);
    free(h_10);
    free(h_11);
    free(h_12);
    free(h_13);
    free(h_14);
    free(h_15);
    free(h_16);
    free(h_17);
    free(h_18);
    free(h_19);
    free(h_20);
    free(h_21);
    free(h_22);
    free(h_23);
    free(h_24);
    free(h_25);
    free(h_26);
    free(h_27);
    free(h_28);
    free(h_29);
    free(h_30);
    free(h_31);
    free(h_32);
    free(h_33);
    free(h_34);
    free(h_35);
    free(h_36);
    free(h_37);
    free(h_38);
    free(h_39);
    free(h_40);
    free(h_41);
    free(h_42);
    free(h_43);
    free(h_44);
    free(h_45);
    free(hostRef);

    return (0);
 }